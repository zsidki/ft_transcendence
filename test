import {useCallback, useContext, useEffect, useRef, useState} from "react";
import { io, Socket } from "socket.io-client";
import Waiting from "./components/waiting";
import { GameState } from "./utils/models";
import Play from "./components/playing";
import "../index.css"
import { useLocation, useNavigate, useSearchParams } from "react-router-dom";
import Backdrop from '@mui/material/Backdrop';
import MenuItem from '@mui/material/MenuItem';
import Snackbar from '@mui/material/Snackbar';
import IconButton from '@mui/material/IconButton';
import Stack from '@mui/material/Stack';
import Button from '@mui/material/Button';
import CloseIcon from '@mui/icons-material/Close';
import { Card, unstable_createMuiStrictModeTheme } from "@mui/material";
import Select from '@mui/material/Select';
import UserSocketContext from "../context/userSocket";
import * as ReactDOM from 'react-dom';
import {useGame} from "../components/hooks/useGame";
import Canva from "./components/playing/canva";
import {useAccounts} from "../components/hooks/useAccount";
import "../index.css"

const start = require('../img/start.png') as string;

const mode1 = require('../images/1.jpg') as string;
const mode2 = require('../images/2.jpg') as string;
const mode3 = require('../images/3.jpg') as string;


const Game = () => {
    // const navigate = useNavigate();
    // const socket = useRef(null as null | Socket);
    // const [gameState, setGameState] = useState(null as null | GameState);
    // const [state, setState] = useState("waiting");
    // const [ingame, setGame] = useState(false);
    const [searchParams] = useSearchParams();
    const [loading, setLoading] = useState(false);

    const {currentGameId, gameState, joinPool, isInGame, cancelGame, clear} = useGame();
    const [needToStartGame, setNeedToStartGame] = useState(false);
    const {me} = useAccounts();

    useEffect(() => {
        return () => {
            if (!isInGame &&currentGameId) {
                cancelGame(currentGameId);
                clear();
            }
        }
    },[])

    useEffect(() => {
        if (!currentGameId && searchParams.get("mod")) {
            const mod = searchParams.get("mod");
            if (mod && mod.length > 0) {
                joinPool(mod);
                setLoading(true);
            }
        }
    },[]);

    useEffect(() => {
        if (gameState && gameState.state === "waiting") {
            setLoading(true);
        }
        else {
            setLoading(false);
        }
    },[gameState]);

    const alertUser = useCallback((e: any) => {
        // alert("You are about to leave the game. Are you sure?");
        return e.returnValue = 'Are you sure you want to leave the game?';
    },[]);

    const handleTabClosing =useCallback ((e: any) => {
        console.log("tab closing");
        cancelGame(currentGameId || '');
       return e.returnValue = '';
    },[]);
    useEffect(() => {
        console.log("add listner");
        window.addEventListener('beforeunload', alertUser)
        window.addEventListener('unload', handleTabClosing)
        return () => {
            window.removeEventListener('beforeunload', alertUser)
            window.removeEventListener('unload', handleTabClosing)
        }
    },[handleTabClosing,alertUser]);
    // useEffect(() => {
    //     if (needToStartGame && currentGameId) {
    //         startGame(currentGameId);
    //         setNeedToStartGame(false);
    //     }
    // },[needToStartGame, currentGameId]);

    console.log("gameState", gameState);

    // return (
    //     <div className="main-content ">

    //     <div className="game">
    //       <div className="game__header justify-center items-center flex flex-col w-full">
    //         <img className= "mt-10 w-[600px] h-[400px] rounded-lg object-cover" src={start} alt="start game" />
    //         <button className="mt-10 bg-blue-500 w-[250px] hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full" onClick={(e) => {
    //             e.preventDefault();
    //             console.log(currentGameId, " start game button clicked")
    //             // startGame(currentGameId || '');
    //         }
    //         }>Start Game</button>
    //       </div>
    //       </div>
    //     </div>
    // )


    return(
      <div className="main-content ">

        <div className="game">
            {/* <h1>Game Over</h1> */}
            <div className="settings h-full shadow-[0_4px_4x_rgba(0,0,0,0.25)] rounded-[20px]">
      <div className="px-16 py-8">
        <table className="leaderboard_table">
          <thead>
            <tr>
              <th>Game Over</th>
            </tr>
          </thead>
            {/* <h2>{true ? "You won!" : "You lost!"}</h2> */}
            <div className="justify-center items-center flex flex-col w-full">
            <div className= "bg-lime-300 ml-0 mr-0 mt-10 w-[600px] h-[400px] rounded-lg object-cover"></div>
            <button className="mt-10 bg-blue-500 w-[250px] hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full" onClick={() => {
                clear ();
                window.location.href = "/game";
            }}>Play Again</button>
            </div>
            </table>
        </div>
        </div>
        </div>
        </div>


        
        )

//     if (gameState && ( gameState.state == "endGame" || gameState.state == "disconnect"))
//     {
//         return(
//             <div>
//                 <h1>Game Over</h1>
//                 <h2>{gameState.winner == me?.Userid ? "You won!" : "You lost!"}</h2>
//                 <button onClick={() => {
//                         clear ();
//                         window.location.href = "/game";
//                 }}>Play Again</button>
//             </div>
//         )
//     }
//    if (gameState && (gameState.state === "start-requried" || gameState.state === "play"|| gameState.state === "scored"))
//         return (
//             <div style={{margin: 'auto'}} >
//                 <Canva
//                     width={500}
//                     height = {200}
//                 />
//             </div>
//         )
//     if (!gameState || !gameState.state )
//         return (
//             <GameOptions/>
//         )
//     return (
//         <p>loading ... </p>
//         // <Loading/>
//     )
    
};
export function GameOptions(props: {}) {
    const [mode, setMode] = useState("1");
    const navigate = useNavigate();

    return (

        <div className="flex flex-wrap justify-center min-w-[500px] grid-row-3 items-center">
            {/* <table className="leaderboard_table text-8xl font-mono"> */}
            <table className="title_mode leaderboard_table text-5xl font-mono">
            <tr>
              <th className="mb-20">Game Mode</th>
            </tr>
            </table>
            
            {/* <div className="m-5 "> */}
            <div className="md:w-[350px] m-5 game_mode p-4 text-center cursor-pointer hover:bg-indigo-700 rounded-lg transition-colors duration-200 animate-shake" onClick={()=>navigate("/game?mod=1")}>
                <ul className="game_mode_text text-xl font-mono">Mode 1</ul>
                <img className="w-190 h-70" src={mode1}  />
            </div>

            <div className=" md:w-[350px] m-5  game_mode p-4 text-center cursor-pointer hover:bg-indigo-700 rounded-lg transition-colors duration-200 animate-shake" onClick={()=>console.log("/game?mod=2")}>
                <ul className="game_mode_text text-xl font-mono">Mode 2</ul>
                <img className="w-190 h-70" src={mode2}  />
            </div>

            <div className=" md:w-[350px] m-5  game_mode p-4 text-center cursor-pointer hover:bg-indigo-700 rounded-lg transition-colors duration-200 animate-shake " onClick={()=>console.log("/game?mod=3")}>
                <ul className="game_mode_text text-xl font-mono">Mode 3</ul>
                <img className="w-190 h-70" src={mode3}  />
            </div>

            <div className="md:w-[350px] m-5  game_mode w-full p-4 text-center cursor-pointer hover:bg-indigo-700 rounded-lg transition-colors duration-200 animate-shake " onClick={()=>navigate("/game?mod=4")}>
                <ul className="game_mode_text text-xl font-mono">Mode 4</ul>
                <img className="w-190 h-70" src={mode1}  />
            </div>

            <div className="game_mode m-5  w-full md:w-[350px] p-4 text-center cursor-pointer hover:bg-indigo-700 rounded-lg transition-colors duration-200 animate-shake" onClick={()=>navigate("/game?mode=5")}>
                <ul className="game_mode_text text-xl font-mono">Mode 5</ul>
                <img className="w-190 h-70" src={mode2}  />
            </div>

            <div className="md:w-[350px] m-5  game_mode w-full  p-4 text-center cursor-pointer hover:bg-indigo-700 rounded-lg transition-colors duration-200 animate-shake" onClick={()=>console.log("/game?mod=6")}>
                <ul className="game_mode_text text-xl font-mono">Mode 6</ul>
                <img className="w-190 h-70" src={mode3}  />
            </div>

        {/* </div> */}
        </div>
    )
}

// export function GameOptions(props: {}) {
//     const [mode, setMode] = useState("1");
//     const navigate = useNavigate();

//     return (
//         <div className="Mode_root">

           
//         <div className="Mode" onClick={()=>navigate("/game?mod=1")}>
//             <ul>mode 1</ul>
//             <img className="Mode_img" src={mode1}  />
//         </div>


//         <div className="Mode" onClick={()=>console.log("/game?mode=2")}>
//             <ul>mode 2</ul>
//             <img className="Mode_img" src={mode2}  />
//         </div>
        


//         <div className="Mode" onClick={()=>console.log("/game?mode=3")}>
//             <ul>mode 3</ul>
//             <img className="Mode_img" src={mode3}  />
//         </div>
//         <div className="Mode" onClick={()=>navigate("/game?mod=4")}>
//             <ul>mode 4</ul>
//             <img className="Mode_img" src={mode1}  />
//         </div>


//         <div className="Mode" onClick={()=>navigate("/game?mode=5")}>
//             <ul>mode 5</ul>
//             <img className="Mode_img" src={mode2}  />
//         </div>
        


//         <div className="Mode" onClick={()=>console.log("/game?mode=6")}>
//             <ul>mode 6</ul>
//             <img className="Mode_img" src={mode3}  />
//         </div>
        
//                  {/* <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={true}>
//                     <Card sx={{ minWidth: 275, minHeight: 300 }}>
//                         <Stack direction="column">
//                             select a mode
//                             <Select
//                                 labelId="demo-simple-select-label"
//                                 id="demo-simple-select"
//                                 value={mode}
//                                 label="Age"
//                                 onChange={(e) => setMode(e.target.value)}
//                             >
//                                 <MenuItem value={1}>1</MenuItem>
//                                 <MenuItem value={2}>2</MenuItem>
//                                 <MenuItem value={3}>3</MenuItem>
//                                 <MenuItem value={4}>4</MenuItem>
//                             </Select>
//                             <Button onClick={(e) => {
//                                 //setBackdrop(false); 
//                                 // navigate(-1)
//                             }} size="small">CANCEL</Button>
//                             <Button size="small" onClick={(e) => {
//                                 //  handlegame()
//                                 navigate("/game?mod=" + mode);

//                             }} >submit</Button>
//                         </Stack>
//                     </Card>

//                 </Backdrop>  */}

//         </div>
//     )
// }

const Loading: React.FC = () => {

    return (
        <div className="fixed top-0 left-0 right-0 bottom-0 z-50  flex flex-col items-center justify-center">
            <div className="loader ease-linear rounded-full border-4 border-t-4  h-12 w-12 mb-4"></div>
            <h2 className="text-center text-white text-xl font-semibold">Loading...</h2>
            <p className="w-[350px] text-center text-white">Waiting for player, This may take a few seconds...</p>
            <button className="bg-red-500 text-white p-2 rounded-lg mt-4" onClick={() => {window.location.replace("/gamesettings")}}>Close</button>
        </div>
      )
}

export default Game;


function componentWillUnmount() {
    throw new Error("Function not implemented.");
}

